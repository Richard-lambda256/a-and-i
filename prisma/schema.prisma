// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Prisma schema for A&I 프로젝트
// DB: PostgreSQL (Neon/Supabase)

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projects  Project[]
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  guideline   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chatrooms   Chatroom[]
  memories    ProjectMemory[]
  apiKeyId    String
  apiKey      ApiKey     @relation(fields: [apiKeyId], references: [id])
}

model Chatroom {
  id          String        @id @default(cuid())
  name        String
  projectId   String
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  conversations Conversation[]
}

enum ConversationState {
  new
  preCoached
  asked
}

model Conversation {
  id                String   @id @default(cuid())
  chatroomId        String
  chatroom          Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  userQuestion      String
  usedQuestion      String
  aiResponse        String
  preCoachingResult Json?
  postCoachingResult Json?
  state             ConversationState @default(new)
  savedToGlobal     Boolean @default(false)
  savedToProject    Boolean @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model GlobalMemory {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectMemory {
  id        String   @id @default(cuid())
  content   String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}

enum PromptType {
  PRE_COACHING
  MAIN_CHAT
  POST_COACHING
}

model Prompt {
  id          String   @id @default(cuid())
  type        String   // 'PRE_COACHING' | 'MAIN_CHAT' | 'POST_COACHING'
  content     String   @db.Text
  description String?  @db.Text
  isActive    Boolean  @default(true)
  version     Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
